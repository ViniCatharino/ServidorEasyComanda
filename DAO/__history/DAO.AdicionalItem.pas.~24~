unit DAO.AdicionalItem;

interface

uses Firedac.Comp.Client,
     FireDAC.DApt,
     DataSet.Serialize,
     DAO.Connection,
     System.SysUtils,
     System.JSON;

type
  TDAOAdicionalItem = class(TDAOConnection)
  private
    FCodigoResposta: integer;
  public
    function ListarAdicionalPorPedido(AIdPedido: integer)                                              : TJSONArray;
    function InserirAdicional(AIdPedido, AIdAdicional: integer; AQuantidade: double; AValor: currency) : TJSONObject;
    function EditarAdicional(AIdPedido, AIdAdicional: integer; AQuantidade: double; AValor: currency)   : TJSONObject;
    function DeletarAdicional(AIdPedido: integer; AIdAdicional: integer)                               : TJSONObject;
    function CodigoResposta                                                                            : integer;
  end;

  {
    id_pedido
    id_adicional
    quantidade
    valor
  }

implementation

{ TDAOAdicionalItem }

function TDAOAdicionalItem.CodigoResposta: integer;
begin
  Result := FCodigoResposta;
end;

function TDAOAdicionalItem.DeletarAdicional(AIdPedido, AIdAdicional: integer): TJSONObject;
var
  LQry: TFDQuery;
begin
  LQry := TFDQuery.Create(nil);
  try
    try
      LQry.Connection := Self.Connection;

      LQry.SQL.Add('delete from adicionais_item ');
      LQry.SQL.Add(' where id_pedido=:id_pedido and id_adicional=:id_adicional');
      LQry.ParamByName('id_pedido').AsInteger := AIdPedido;
      LQry.Active := True;
      Result := LQry.ToJSONObject;
      FCodigoResposta := 200;
    except
      on e:exception do
      begin
        raise Exception.Create('Falha ao listar o itens adicionais, erro: ' + e.Message);
      end;
    end;
  finally
    FreeAndNil(LQry);
  end;
end;

function TDAOAdicionalItem.EditarAdicional(AIdPedido, AIdAdicional: integer; AQuantidade: double; AValor: currency): TJSONObject;
var
  LQry: TFDQuery;
  LIdAdicional: integer;
begin
  LQry := TFDQuery.Create(nil);
  try
    LQry.Connection := Self.Connection;

    LQry.SQL.Add('update adicionais_item set quantidade=:quantidade, valor=:valor');
    LQry.SQL.Add(' where id_pedido=:id_pedido and id_adicional=:id_adicional');
    LQry.ParamByName('id_pedido').AsInteger    := AIdPedido;
    LQry.ParamByName('id_adicional').AsInteger := AIdAdicional;
    LQry.ParamByName('quantidade').AsFloat     := AQuantidade;
    LQry.ParamByName('valor').AsCurrency       := AValor;
    LQry.Active := True;
    Result := LQry.ToJSONObject;
    FCodigoResposta := 204;
  except
    on e:exception do
    begin
      raise Exception.Create('Falha ao atualizar o Adicional, erro: ' + e.Message);
    end;
  end;
end;

function TDAOAdicionalItem.InserirAdicional(AIdPedido, AIdAdicional: integer; AQuantidade: double; AValor: currency): TJSONObject;
var
  LQry: TFDQuery;
begin
  LQry := TFDQuery.Create(nil);
  try
    try
      LQry.Connection := Self.Connection;

      LQry.SQL.Add('insert into adicionais_item (id_pedido, id_adicional, quantidade, valor)');
      LQry.SQL.Add(' values (:id_pedido, :id_adicional, :quantidade, :valor)');
      LQry.ParamByName('id_pedido').AsInteger    := AIdPedido;
      LQry.ParamByName('id_adicional').AsInteger := AIdAdicional;
      LQry.ParamByName('quantidade').AsFloat     := AQuantidade;
      LQry.ParamByName('valor').AsCurrency       := AValor;
      LQry.Active := True;
      Result := LQry.ToJSONObject;
      FCodigoResposta := 201;
    except
      on e:exception do
      begin
        raise Exception.Create('Falha ao inserir o adicional, erro: ' + e.Message);
      end;
    end;
  finally
    FreeAndNil(LQry);
  end;
end;

function TDAOAdicionalItem.ListarAdicionalPorPedido(AIdPedido: integer): TJSONArray;
var
  LQry: TFDQuery;
begin
  LQry := TFDQuery.Create(nil);
  try
    try
      LQry.Connection := Self.Connection;

      LQry.SQL.Add('select * from adicionais_item ');
      LQry.SQL.Add(' where id_pedido=:id_pedido');
      LQry.ParamByName('id_pedido').AsInteger := AIdPedido;
      LQry.Active := True;
      Result := LQry.ToJSONArray;
      FCodigoResposta := 200;
    except
      on e:exception do
      begin
        raise Exception.Create('Falha ao listar o itens adicionais, erro: ' + e.Message);
      end;
    end;
  finally
    FreeAndNil(LQry);
  end;
end;

end.
